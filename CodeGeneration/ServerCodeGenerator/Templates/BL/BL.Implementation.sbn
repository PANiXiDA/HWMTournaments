{{- $class_name = model_name + "sBL" -}}
{{- $search_params = model_name + "sSearchParams" -}}
{{- $convert_params = model_name + "sConvertParams?" -}}
{{- $dal_interface_name = "I" + model_name + "sDAL" -}}
{{- $dal_parameter_name  = model_camel_name + "sDAL" -}}
{{- $dal_name = "_" + $dal_parameter_name -}}

using BL.Interfaces;
using Common.ConvertParams;
using Common.SearchParams;
using Common.SearchParams.Core;
using DAL.Interfaces;
using Entities;

public sealed class {{ $class_name }} : I{{ $class_name }}
{
    private readonly {{ $dal_interface_name }} {{ $dal_name }};

    public {{ $class_name }}({{ $dal_interface_name }} {{ $dal_parameter_name }})
    {
        {{ $dal_name }} = {{ $dal_parameter_name }};
    }

    public Task<{{ model_name }}> GetAsync({{ id_type }} id, {{ $convert_params }} convertParams = null)
    {
        return {{ $dal_name }}.GetAsync(id, convertParams);
    }

    public Task<SearchResult<{{ model_name }}>> GetAsync({{ $search_params }} searchParams, {{ $convert_params }} convertParams = null)
    {
        return {{ $dal_name }}.GetAsync(searchParams, convertParams);
    }

    public Task<bool> ExistsAsync({{ id_type }} id)
    {
        return {{ $dal_name }}.ExistsAsync(id);
    }

    public Task<bool> ExistsAsync({{ $search_params }} searchParams)
    {
        return {{ $dal_name }}.ExistsAsync(searchParams);
    }

    public async Task<{{ id_type }}> AddOrUpdateAsync({{ model_name }} entity)
    {
        entity.Id = await {{ $dal_name }}.AddOrUpdateAsync(entity);
        return entity.Id;
    }

    public async Task<IList<int>> AddOrUpdateAsync(IList<{{ model_name }}> entities)
    {
        return await {{ $dal_name }}.AddOrUpdateAsync(entities);
    }

    public Task<bool> DeleteAsync({{ id_type }} id)
    {
        return {{ $dal_name }}.DeleteAsync(id);
    }

    public Task<bool> DeleteAsync(List<{{ id_type }}> ids)
    {
        return {{ $dal_name }}.DeleteAsync(db => ids.Contains(db.Id));
    }
}