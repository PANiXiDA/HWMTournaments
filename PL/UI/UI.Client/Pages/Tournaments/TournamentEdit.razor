@page "/tournaments/create"
@page "/tournaments/update/{TournamentId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>@(_isEdit ? "Редактировать турнир" : "Создать турнир")</PageTitle>

<h2 class="page-title">
    @(_isEdit ? "Редактирование" : "Создание") турнира
</h2>

<EditForm Model="_tournament" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-container">

        <div class="form-group">
            <label class="form-label">Название</label>
            <InputText class="form-input" @bind-Value="_tournament.Name" />
        </div>

        <div class="form-group">
            <label class="form-label">Дата начала</label>
            <InputDate class="form-input" @bind-Value="_tournament.StartDate" />
        </div>

        <div class="form-group">
            <label class="form-label">Формат</label>
            <InputSelect class="form-input" @bind-Value="_tournament.Format">
                @foreach (var item in Enum.GetValues<TournamentFormat>())
                {
                    <option value="@item">@item.GetDisplayName()</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">Сетка турнира</label>
            <InputSelect class="form-input" @bind-Value="_tournament.GridType">
                @foreach (var item in Enum.GetValues<TournamentGridType>())
                {
                    <option value="@item">@item.GetDisplayName()</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label class="form-label">
                <InputCheckbox @bind-Value="_tournament.FactionsBan" />
                Запрет фракций
            </label>
        </div>

        <div class="form-group">
            <label class="form-label">Минимальный ELO</label>
            <InputNumber class="form-input" @bind-Value="_tournament.MinimumElo" />
        </div>

        <div class="form-group">
            <label class="form-label">Максимальный ELO</label>
            <InputNumber class="form-input" @bind-Value="_tournament.MaximumElo" />
        </div>

        <div class="form-group">
            <label class="form-label">Описание</label>
            <InputTextArea class="form-input" @bind-Value="_tournament.Description" rows="4" />
        </div>

        <div class="form-actions">
            <button type="submit" class="btn btn-gold">
                @(_isEdit ? "Сохранить" : "Создать")
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Отмена</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] 
    public int? TournamentId { get; set; }

    private TournamentDTO _tournament { get; set; } = new();
    private bool _isEdit => TournamentId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (_isEdit)
        {
            var response = await Http.GetFromJsonAsync<RestApiResponse<TournamentDTO>>($"api/v1/tournaments/{TournamentId}");
            _tournament = response?.Payload ?? new TournamentDTO();
        }
        else
        {
            _tournament.StartDate = DateTime.UtcNow;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_isEdit)
        {
            await Http.PutAsJsonAsync("api/v1/tournaments", _tournament);
        }
        else
        {
            await Http.PostAsJsonAsync("api/v1/tournaments", _tournament);
        }

        Navigation.NavigateTo("/tournaments");
    }

    private void Cancel() => Navigation.NavigateTo("/tournaments");
}
