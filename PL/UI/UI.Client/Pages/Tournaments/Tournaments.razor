@page "/tournaments"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Турниры</PageTitle>

<h2 class="page-title">Список турниров</h2>

<div class="tournaments-actions">
    <NavLink class="btn btn-gold" href="/tournaments/create">Создать турнир</NavLink>
</div>

<div class="tournaments-filters">
    <input class="filter-input" placeholder="Поиск по названию…" @bind="_searchQuery" />
    <select class="filter-input" @bind="_selectedFormat">
        <option value="">— Формат турнира —</option>
        @foreach (var item in Enum.GetValues<TournamentFormat>())
        {
            <option value="@item">@item.GetDisplayName()</option>
        }
    </select>
    <button class="btn btn-secondary" @onclick="ApplyFilters">Применить</button>
</div>

@if (_isLoading)
{
    <p>Загрузка…</p>
}
else if (_tournaments.Count == 0)
{
    <p>Ничего не найдено.</p>
}
else
{
    <table class="tournament-table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Дата</th>
                <th>Формат</th>
                <th>Минимальное эло</th>
                <th>Максимальное эло</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tournament in _tournaments)
            {
                <tr>
                    <td>@tournament.Name</td>
                    <td>@tournament.StartDate.ToString("dd.MM.yyyy")</td>
                    <td>@tournament.Format.GetDisplayName()</td>
                    <td>@tournament.MinimumElo</td>
                    <td>@tournament.MaximumElo</td>
                    <td class="actions-cell">
                        <NavLink class="btn btn-secondary small" href="@($"/tournaments/update/{tournament.Id}")">Записаться на турнир</NavLink>
                        <NavLink class="btn btn-secondary small" href="@($"/tournaments/update/{tournament.Id}")">Изменить</NavLink>
                        <button class="btn btn-secondary small" @onclick="() => ConfirmDelete(tournament.Id)">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav class="pagination">
        <button class="page-btn" @onclick="PrevPage" disabled="@(_currentPage == 1)">‹</button>
        @foreach (var p in _pageNumbers)
        {
            if (p == null)
            {
                <span class="ellipsis">…</span>
            }
            else
            {
                <button class="page-btn @(p == _currentPage ? "active" : null)"
                        @onclick="() => GoToPage(p.Value)">
                    @p
                </button>
            }
        }
        <button class="page-btn" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">›</button>
    </nav>
}

@code {
    private List<TournamentDTO> _tournaments = new();
    private bool _isLoading;
    private string? _searchQuery;
    private TournamentFormat? _selectedFormat;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalCount;
    private int _totalPages => (int)Math.Ceiling((double)_totalCount / _pageSize);

    private List<int?> _pageNumbers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPage();
    }

    private async Task LoadPage()
    {
        _isLoading = true;

        var searchParams = new Dictionary<string, string?>
        {
            ["Page"] = _currentPage.ToString(),
            ["ObjectsCount"] = _pageSize.ToString()
        };
        if (!string.IsNullOrEmpty(_searchQuery))
        {
            searchParams["SearchQuery"] = _searchQuery!;
        }
        if (_selectedFormat.HasValue)
        {
            searchParams["Format"] = _selectedFormat.Value.ToString();
        }

        var url = QueryHelpers.AddQueryString("api/v1/tournaments/get-by-filter", searchParams);
        var response = await Http.GetFromJsonAsync<RestApiResponse<SearchResult<TournamentDTO>>>(url);
        if (response != null && response.IsSuccess)
        {
            _totalCount = response.Payload.Total;
            _tournaments = response.Payload.Objects.ToList();
            BuildPageNumbers();
        }

        _isLoading = false;
    }

    private void BuildPageNumbers()
    {
        var list = new List<int?>();

        void add(int x) => list.Add(x);
        void addEll() => list.Add(null);

        if (_totalPages <= 7)
        {
            for (int i = 1; i <= _totalPages; i++) add(i);
        }
        else
        {
            add(1);
            if (_currentPage > 4)
            {
                addEll();
            }
            for (int i = Math.Max(2, _currentPage - 2); i <= Math.Min(_totalPages - 1, _currentPage + 2); i++)
            {
                add(i);
            }
            if (_currentPage < _totalPages - 3)
            {
                addEll(); 
            }
            add(_totalPages);
        }

        _pageNumbers = list;
    }

    private Task ApplyFilters()
    {
        _currentPage = 1;
        return LoadPage();
    }

    private Task PrevPage() => GoToPage(_currentPage - 1);

    private Task NextPage() => GoToPage(_currentPage + 1);

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > _totalPages) return;
        _currentPage = page;
        await LoadPage();
    }

    private async Task ConfirmDelete(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", $"Удалить турнир #{id}?")) return;
        await Http.DeleteAsync($"api/v1/tournaments/{id}");
        await LoadPage();
    }
}
